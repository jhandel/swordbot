# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Devices
else:
    import _Devices

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class ClearPathMotorSD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Devices.ClearPathMotorSD_swiginit(self, _Devices.new_ClearPathMotorSD())
    __swig_destroy__ = _Devices.delete_ClearPathMotorSD

    def attach(self, *args) -> "void":
        return _Devices.ClearPathMotorSD_attach(self, *args)

    def moveInMM(self, arg2: "double", arg3: "int") -> "bool":
        return _Devices.ClearPathMotorSD_moveInMM(self, arg2, arg3)

    def enable(self) -> "void":
        return _Devices.ClearPathMotorSD_enable(self)

    def getCommandedPosition(self) -> "long":
        return _Devices.ClearPathMotorSD_getCommandedPosition(self)

    def readHLFB(self) -> "bool":
        return _Devices.ClearPathMotorSD_readHLFB(self)

    def stopMove(self) -> "void":
        return _Devices.ClearPathMotorSD_stopMove(self)

    def stepsPer100mm(self, arg2: "double") -> "void":
        return _Devices.ClearPathMotorSD_stepsPer100mm(self, arg2)

    def setMaxVelInMM(self, arg2: "long") -> "void":
        return _Devices.ClearPathMotorSD_setMaxVelInMM(self, arg2)

    def setAccelInMM(self, arg2: "long") -> "void":
        return _Devices.ClearPathMotorSD_setAccelInMM(self, arg2)

    def setDeccelInMM(self, arg2: "long") -> "void":
        return _Devices.ClearPathMotorSD_setDeccelInMM(self, arg2)

    def commandDone(self) -> "bool":
        return _Devices.ClearPathMotorSD_commandDone(self)

    def disable(self) -> "void":
        return _Devices.ClearPathMotorSD_disable(self)

    def AxisLocation(self) -> "double":
        return _Devices.ClearPathMotorSD_AxisLocation(self)

    def clearData(self) -> "void":
        return _Devices.ClearPathMotorSD_clearData(self)

    def GetLoggedPulseCount(self) -> "long":
        return _Devices.ClearPathMotorSD_GetLoggedPulseCount(self)

    def LocationAt(self, arg2: "long") -> "long":
        return _Devices.ClearPathMotorSD_LocationAt(self, arg2)

    def TimeOfLocation(self, arg2: "long") -> "long":
        return _Devices.ClearPathMotorSD_TimeOfLocation(self, arg2)
    PinA = property(_Devices.ClearPathMotorSD_PinA_get, _Devices.ClearPathMotorSD_PinA_set)
    PinB = property(_Devices.ClearPathMotorSD_PinB_get, _Devices.ClearPathMotorSD_PinB_set)
    PinE = property(_Devices.ClearPathMotorSD_PinE_get, _Devices.ClearPathMotorSD_PinE_set)
    PinH = property(_Devices.ClearPathMotorSD_PinH_get, _Devices.ClearPathMotorSD_PinH_set)
    Enabled = property(_Devices.ClearPathMotorSD_Enabled_get, _Devices.ClearPathMotorSD_Enabled_set)
    moveStateX = property(_Devices.ClearPathMotorSD_moveStateX_get, _Devices.ClearPathMotorSD_moveStateX_set)
    AbsPosition = property(_Devices.ClearPathMotorSD_AbsPosition_get, _Devices.ClearPathMotorSD_AbsPosition_set)
    PulseLocation = property(_Devices.ClearPathMotorSD_PulseLocation_get, _Devices.ClearPathMotorSD_PulseLocation_set)
    DirForwardPinLevel = property(_Devices.ClearPathMotorSD_DirForwardPinLevel_get, _Devices.ClearPathMotorSD_DirForwardPinLevel_set)

# Register ClearPathMotorSD in _Devices:
_Devices.ClearPathMotorSD_swigregister(ClearPathMotorSD)

class LoadSensorCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Devices.delete_LoadSensorCallback

    def run(self) -> "void":
        return _Devices.LoadSensorCallback_run(self)

    def __init__(self):
        _Devices.LoadSensorCallback_swiginit(self, _Devices.new_LoadSensorCallback())

# Register LoadSensorCallback in _Devices:
_Devices.LoadSensorCallback_swigregister(LoadSensorCallback)

class LoadSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Devices.LoadSensor_swiginit(self, _Devices.new_LoadSensor())
    __swig_destroy__ = _Devices.delete_LoadSensor

    def startMonitor(self, channel: "uint8_t", target: "double", cballback: "LoadSensorCallback") -> "void":
        return _Devices.LoadSensor_startMonitor(self, channel, target, cballback)

    def stopMonitor(self) -> "void":
        return _Devices.LoadSensor_stopMonitor(self)

    def setGainAndRate(self, arg2: "ADS1256_DRATE", arg3: "ADS1256_GAIN") -> "void":
        return _Devices.LoadSensor_setGainAndRate(self, arg2, arg3)

    def startRead(self, arg2: "long", arg3: "uint8_t") -> "void":
        return _Devices.LoadSensor_startRead(self, arg2, arg3)

    def singleMeasurement(self, arg2: "uint8_t") -> "uint32_t":
        return _Devices.LoadSensor_singleMeasurement(self, arg2)

    def currentlyReading(self) -> "bool":
        return _Devices.LoadSensor_currentlyReading(self)

    def stopRead(self) -> "void":
        return _Devices.LoadSensor_stopRead(self)

    def clearData(self) -> "void":
        return _Devices.LoadSensor_clearData(self)

    def ReadingAt(self, arg2: "long") -> "uint32_t":
        return _Devices.LoadSensor_ReadingAt(self, arg2)

    def TimeOfReading(self, arg2: "long") -> "long":
        return _Devices.LoadSensor_TimeOfReading(self, arg2)
    Channel = property(_Devices.LoadSensor_Channel_get, _Devices.LoadSensor_Channel_set)
    CurrentRead = property(_Devices.LoadSensor_CurrentRead_get, _Devices.LoadSensor_CurrentRead_set)
    RequestedRead = property(_Devices.LoadSensor_RequestedRead_get, _Devices.LoadSensor_RequestedRead_set)

    def SetMode(self, arg2: "uint8_t") -> "void":
        return _Devices.LoadSensor_SetMode(self, arg2)
    DateRate = property(_Devices.LoadSensor_DateRate_get, _Devices.LoadSensor_DateRate_set)
    Gain = property(_Devices.LoadSensor_Gain_get, _Devices.LoadSensor_Gain_set)

# Register LoadSensor in _Devices:
_Devices.LoadSensor_swigregister(LoadSensor)

ADS1256_GAIN_1 = _Devices.ADS1256_GAIN_1
ADS1256_GAIN_2 = _Devices.ADS1256_GAIN_2
ADS1256_GAIN_4 = _Devices.ADS1256_GAIN_4
ADS1256_GAIN_8 = _Devices.ADS1256_GAIN_8
ADS1256_GAIN_16 = _Devices.ADS1256_GAIN_16
ADS1256_GAIN_32 = _Devices.ADS1256_GAIN_32
ADS1256_GAIN_64 = _Devices.ADS1256_GAIN_64
ADS1256_30000SPS = _Devices.ADS1256_30000SPS
ADS1256_15000SPS = _Devices.ADS1256_15000SPS
ADS1256_7500SPS = _Devices.ADS1256_7500SPS
ADS1256_3750SPS = _Devices.ADS1256_3750SPS
ADS1256_2000SPS = _Devices.ADS1256_2000SPS
ADS1256_1000SPS = _Devices.ADS1256_1000SPS
ADS1256_500SPS = _Devices.ADS1256_500SPS
ADS1256_100SPS = _Devices.ADS1256_100SPS
ADS1256_60SPS = _Devices.ADS1256_60SPS
ADS1256_50SPS = _Devices.ADS1256_50SPS
ADS1256_30SPS = _Devices.ADS1256_30SPS
ADS1256_25SPS = _Devices.ADS1256_25SPS
ADS1256_15SPS = _Devices.ADS1256_15SPS
ADS1256_10SPS = _Devices.ADS1256_10SPS
ADS1256_5SPS = _Devices.ADS1256_5SPS
ADS1256_2d5SPS = _Devices.ADS1256_2d5SPS
ADS1256_DRATE_MAX = _Devices.ADS1256_DRATE_MAX
REG_STATUS = _Devices.REG_STATUS
REG_MUX = _Devices.REG_MUX
REG_ADCON = _Devices.REG_ADCON
REG_DRATE = _Devices.REG_DRATE
REG_IO = _Devices.REG_IO
REG_OFC0 = _Devices.REG_OFC0
REG_OFC1 = _Devices.REG_OFC1
REG_OFC2 = _Devices.REG_OFC2
REG_FSC0 = _Devices.REG_FSC0
REG_FSC1 = _Devices.REG_FSC1
REG_FSC2 = _Devices.REG_FSC2
CMD_WAKEUP = _Devices.CMD_WAKEUP
CMD_RDATA = _Devices.CMD_RDATA
CMD_RDATAC = _Devices.CMD_RDATAC
CMD_SDATAC = _Devices.CMD_SDATAC
CMD_RREG = _Devices.CMD_RREG
CMD_WREG = _Devices.CMD_WREG
CMD_SELFCAL = _Devices.CMD_SELFCAL
CMD_SELFOCAL = _Devices.CMD_SELFOCAL
CMD_SELFGCAL = _Devices.CMD_SELFGCAL
CMD_SYSOCAL = _Devices.CMD_SYSOCAL
CMD_SYSGCAL = _Devices.CMD_SYSGCAL
CMD_SYNC = _Devices.CMD_SYNC
CMD_STANDBY = _Devices.CMD_STANDBY
CMD_RESET = _Devices.CMD_RESET

def ADS1256_init() -> "UBYTE":
    return _Devices.ADS1256_init()

def ADS1256_SetMode(Mode: "UBYTE") -> "void":
    return _Devices.ADS1256_SetMode(Mode)

def ADS1256_ConfigADC(gain: "ADS1256_GAIN", drate: "ADS1256_DRATE") -> "void":
    return _Devices.ADS1256_ConfigADC(gain, drate)

def ADS1256_GetChannalValue(Channel: "UBYTE") -> "UDOUBLE":
    return _Devices.ADS1256_GetChannalValue(Channel)

def ADS1256_GetAll(ADC_Value: "UDOUBLE *") -> "void":
    return _Devices.ADS1256_GetAll(ADC_Value)

def ADS1256_GetContinousSingle(ADC_Value: "UDOUBLE *", Channel: "UBYTE", count: "int") -> "void":
    return _Devices.ADS1256_GetContinousSingle(ADC_Value, Channel, count)

def ADS1256_WaitDRDY() -> "void":
    return _Devices.ADS1256_WaitDRDY()

def ADS1256_SetChannal(arg1: "UBYTE") -> "void":
    return _Devices.ADS1256_SetChannal(arg1)

def ADS1256_SetDiffChannal(arg1: "UBYTE") -> "void":
    return _Devices.ADS1256_SetDiffChannal(arg1)

def ADS1256_WriteCmd(Cmd: "UBYTE") -> "void":
    return _Devices.ADS1256_WriteCmd(Cmd)

def ADS1256_ReadChipID() -> "UBYTE":
    return _Devices.ADS1256_ReadChipID()

def ADS1256_Read_data(Reg: "UBYTE") -> "UBYTE":
    return _Devices.ADS1256_Read_data(Reg)
class SwitchCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Devices.delete_SwitchCallback

    def run(self) -> "void":
        return _Devices.SwitchCallback_run(self)

    def __init__(self):
        if self.__class__ == SwitchCallback:
            _self = None
        else:
            _self = self
        _Devices.SwitchCallback_swiginit(self, _Devices.new_SwitchCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _Devices.disown_SwitchCallback(self)
        return weakref.proxy(self)

# Register SwitchCallback in _Devices:
_Devices.SwitchCallback_swigregister(SwitchCallback)
cvar = _Devices.cvar
ADS1256_DRATE_E = cvar.ADS1256_DRATE_E

class Switch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Devices.Switch_swiginit(self, _Devices.new_Switch())
    __swig_destroy__ = _Devices.delete_Switch

    def startMonitor(self, pin: "uint8_t", edge: "bool", poll: "long", cballback: "SwitchCallback") -> "void":
        return _Devices.Switch_startMonitor(self, pin, edge, poll, cballback)

    def stopMonitor(self) -> "void":
        return _Devices.Switch_stopMonitor(self)
    Pin = property(_Devices.Switch_Pin_get, _Devices.Switch_Pin_set)
    Edge = property(_Devices.Switch_Edge_get, _Devices.Switch_Edge_set)
    Poll = property(_Devices.Switch_Poll_get, _Devices.Switch_Poll_set)

# Register Switch in _Devices:
_Devices.Switch_swigregister(Switch)



