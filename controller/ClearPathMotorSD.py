# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _ClearPathMotorSD
else:
    import _ClearPathMotorSD

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ClearPathMotorSD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _ClearPathMotorSD.ClearPathMotorSD_swiginit(self, _ClearPathMotorSD.new_ClearPathMotorSD())
    __swig_destroy__ = _ClearPathMotorSD.delete_ClearPathMotorSD

    def attach(self, *args):
        return _ClearPathMotorSD.ClearPathMotorSD_attach(self, *args)

    def moveInMM(self, arg2, arg3):
        return _ClearPathMotorSD.ClearPathMotorSD_moveInMM(self, arg2, arg3)

    def enable(self):
        return _ClearPathMotorSD.ClearPathMotorSD_enable(self)

    def getCommandedPosition(self):
        return _ClearPathMotorSD.ClearPathMotorSD_getCommandedPosition(self)

    def readHLFB(self):
        return _ClearPathMotorSD.ClearPathMotorSD_readHLFB(self)

    def stopMove(self):
        return _ClearPathMotorSD.ClearPathMotorSD_stopMove(self)

    def stepsPer100mm(self, arg2):
        return _ClearPathMotorSD.ClearPathMotorSD_stepsPer100mm(self, arg2)

    def setMaxVelInMM(self, arg2):
        return _ClearPathMotorSD.ClearPathMotorSD_setMaxVelInMM(self, arg2)

    def setAccelInMM(self, arg2):
        return _ClearPathMotorSD.ClearPathMotorSD_setAccelInMM(self, arg2)

    def setDeccelInMM(self, arg2):
        return _ClearPathMotorSD.ClearPathMotorSD_setDeccelInMM(self, arg2)

    def commandDone(self):
        return _ClearPathMotorSD.ClearPathMotorSD_commandDone(self)

    def disable(self):
        return _ClearPathMotorSD.ClearPathMotorSD_disable(self)
    PinA = property(_ClearPathMotorSD.ClearPathMotorSD_PinA_get, _ClearPathMotorSD.ClearPathMotorSD_PinA_set)
    PinB = property(_ClearPathMotorSD.ClearPathMotorSD_PinB_get, _ClearPathMotorSD.ClearPathMotorSD_PinB_set)
    PinE = property(_ClearPathMotorSD.ClearPathMotorSD_PinE_get, _ClearPathMotorSD.ClearPathMotorSD_PinE_set)
    PinH = property(_ClearPathMotorSD.ClearPathMotorSD_PinH_get, _ClearPathMotorSD.ClearPathMotorSD_PinH_set)
    Enabled = property(_ClearPathMotorSD.ClearPathMotorSD_Enabled_get, _ClearPathMotorSD.ClearPathMotorSD_Enabled_set)
    moveStateX = property(_ClearPathMotorSD.ClearPathMotorSD_moveStateX_get, _ClearPathMotorSD.ClearPathMotorSD_moveStateX_set)
    AbsPosition = property(_ClearPathMotorSD.ClearPathMotorSD_AbsPosition_get, _ClearPathMotorSD.ClearPathMotorSD_AbsPosition_set)

# Register ClearPathMotorSD in _ClearPathMotorSD:
_ClearPathMotorSD.ClearPathMotorSD_swigregister(ClearPathMotorSD)



