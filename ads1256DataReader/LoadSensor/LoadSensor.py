# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _LoadSensor
else:
    import _LoadSensor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class LoadSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _LoadSensor.LoadSensor_swiginit(self, _LoadSensor.new_LoadSensor())
    __swig_destroy__ = _LoadSensor.delete_LoadSensor

    def startRead(self, *args):
        return _LoadSensor.LoadSensor_startRead(self, *args)

    def currentlyReading(self):
        return _LoadSensor.LoadSensor_currentlyReading(self)

    def stopRead(self):
        return _LoadSensor.LoadSensor_stopRead(self)

    def clearData(self):
        return _LoadSensor.LoadSensor_clearData(self)

    def ReadingAt(self, arg2):
        return _LoadSensor.LoadSensor_ReadingAt(self, arg2)

    def TimeOfReading(self, arg2):
        return _LoadSensor.LoadSensor_TimeOfReading(self, arg2)
    Channel = property(_LoadSensor.LoadSensor_Channel_get, _LoadSensor.LoadSensor_Channel_set)
    CurrentRead = property(_LoadSensor.LoadSensor_CurrentRead_get, _LoadSensor.LoadSensor_CurrentRead_set)
    RequestedRead = property(_LoadSensor.LoadSensor_RequestedRead_get, _LoadSensor.LoadSensor_RequestedRead_set)
    DateRate = property(_LoadSensor.LoadSensor_DateRate_get, _LoadSensor.LoadSensor_DateRate_set)
    Gain = property(_LoadSensor.LoadSensor_Gain_get, _LoadSensor.LoadSensor_Gain_set)

# Register LoadSensor in _LoadSensor:
_LoadSensor.LoadSensor_swigregister(LoadSensor)



